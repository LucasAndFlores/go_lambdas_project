Transform: AWS::Serverless-2016-10-31
Description: Golang lambda functions for S3 Bucket operation

Globals:
  Function:
    Timeout: 15
    Runtime: go1.x
    Architectures:
      - x86_64

Parameters:
  BucketName:
    Type: String
    Default: ''

  DynamoTableName:
    Type: String
    Default: ''

Resources:
  S3BucketToRespond:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: !Ref BucketName

  MetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoTableName

      AttributeDefinitions:
        - AttributeName: filename
          AttributeType: S
      KeySchema:
        - AttributeName: filename
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  GoLambdaFunctions:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Dev

  GetAllAudiosFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "get_all_audios"
      CodeUri: ./cmd/functions/get_all_audios/
      Handler: handler.go
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName
      Events:
        CatchAll:
          Type: Api
          Properties:
            RestApiId: !Ref GoLambdaFunctions
            Path: /audio
            Method: GET

  GetAudioByIDFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "get_audio_by_id"
      CodeUri: ./cmd/functions/get_audio_by_id/
      Handler: handler.go
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref BucketName
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName
      Events:
        CatchAll:
          Type: Api
          Properties:
            RestApiId: !Ref GoLambdaFunctions
            Path: /audio/{filename}
            Method: GET

  StoreAudioFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "store_audio"
      CodeUri: ./cmd/functions/store_audio/
      Handler: handler.go
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref BucketName
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName
      Events:
        CatchAll:
          Type: Api
          Properties:
            RestApiId: !Ref GoLambdaFunctions
            Path: /audio
            Method: POST

  ReactToFileUpload:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "react_to_file_upload"
      CodeUri: ./cmd/functions/react_to_file_upload/
      Handler: handler.go
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref BucketName
        - DynamoDBWritePolicy:
            TableName: !Ref DynamoTableName
            Actions:
              - PutItem
            Conditions:
              ForAll:
                ArnLike: [ "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${{DYNAMO_TABLE}}/*" ]
      Environment:
        Variables:
          DYNAMO_TABLE: !Ref DynamoTableName
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref S3BucketToRespond
            Events: s3:ObjectCreated:*
